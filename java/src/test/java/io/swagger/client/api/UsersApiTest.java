/*
 * UserManagementAPI
 * API for user management
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@naqdina.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ActivateUserResp;
import io.swagger.client.model.AuthenticateResp;
import io.swagger.client.model.Body;
import io.swagger.client.model.Body1;
import io.swagger.client.model.Body2;
import io.swagger.client.model.Body3;
import io.swagger.client.model.CommonErrorResp;
import io.swagger.client.model.CommonResp;
import io.swagger.client.model.EmailExistsResp;
import io.swagger.client.model.ExistingUser;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.InlineResponse4001;
import io.swagger.client.model.InlineResponse4002;
import io.swagger.client.model.InlineResponse409;
import io.swagger.client.model.InviteUserResp;
import io.swagger.client.model.NewUser;
import io.swagger.client.model.PinReq;
import io.swagger.client.model.RoleUpgradeFailedResp;
import io.swagger.client.model.UpgradeLevelResp;
import io.swagger.client.model.UserActivationFailedResp;
import io.swagger.client.model.UserReq;
import io.swagger.client.model.UserResp;
import io.swagger.client.model.ViewMyAgentsResp;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * View Profile by ID.
     *
     * Gets a user profile by ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserByIdTest() throws ApiException {
        Long userId = null;
        CommonResp response = api.deleteUserById(userId);

        // TODO: test validations
    }
    /**
     * View Profile by ID.
     *
     * Gets a user profile by ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserByIdTest() throws ApiException {
        Long userId = null;
        ExistingUser response = api.getUserById(userId);

        // TODO: test validations
    }
    /**
     * Logs user into the system
     *
     * Logs user into the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginUserTest() throws ApiException {
        Body body = null;
        AuthenticateResp response = api.loginUser(body);

        // TODO: test validations
    }
    /**
     * The Operation activates users of the naqdina system
     *
     * Activate User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersActivateUserIdPostTest() throws ApiException {
        Long userId = null;
        String roleName = null;
        ActivateUserResp response = api.usersActivateUserIdPost(userId, roleName);

        // TODO: test validations
    }
    /**
     * Add User operation
     *
     * Add User.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        NewUser body = null;
        InlineResponse200 response = api.usersPost(body);

        // TODO: test validations
    }
    /**
     * The  Operation invite users to register into the naqdina system
     *
     * Invite User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdInvitePostTest() throws ApiException {
        Long userId = null;
        Body2 body = null;
        InviteUserResp response = api.usersUserIdInvitePost(userId, body);

        // TODO: test validations
    }
    /**
     * The Operation to change the password
     *
     * Change Password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdPasswordPutTest() throws ApiException {
        Long userId = null;
        Body3 body = null;
        CommonResp response = api.usersUserIdPasswordPut(userId, body);

        // TODO: test validations
    }
    /**
     * The operation Creates pin for the user
     *
     * Set Pin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdPinPostTest() throws ApiException {
        Long userId = null;
        PinReq body = null;
        UserResp response = api.usersUserIdPinPost(userId, body);

        // TODO: test validations
    }
    /**
     * The operation Changes pin for the user
     *
     * Change Pin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdPinPutTest() throws ApiException {
        Long userId = null;
        Body1 body = null;
        InlineResponse2001 response = api.usersUserIdPinPut(userId, body);

        // TODO: test validations
    }
    /**
     * Update User by Id
     *
     * Update User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdPutTest() throws ApiException {
        Long userId = null;
        UserReq body = null;
        UserResp response = api.usersUserIdPut(userId, body);

        // TODO: test validations
    }
    /**
     * The  Operation request the admin to upgrade the role of the user
     *
     * Upgrade Level
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdRolesGetTest() throws ApiException {
        Long userId = null;
        String upgradeRole = null;
        UpgradeLevelResp response = api.usersUserIdRolesGet(userId, upgradeRole);

        // TODO: test validations
    }
    /**
     * The Operation gets the list of Agents signed-up under an user
     *
     * Get my agents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdViewAgentsGetTest() throws ApiException {
        Long userId = null;
        ViewMyAgentsResp response = api.usersUserIdViewAgentsGet(userId);

        // TODO: test validations
    }
}
