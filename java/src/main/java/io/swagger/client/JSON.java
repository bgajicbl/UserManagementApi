/*
 * UserManagementAPI
 * API for user management
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@naqdina.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import io.swagger.client.model.*;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(CommonResp.class, new TypeSelector<CommonResp>() {
            @Override
            public Class<? extends CommonResp> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends CommonResp>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ActivateUserResp".toUpperCase(), ActivateUserResp.class);
                    classByDiscriminatorValue.put("AuthenticateResp".toUpperCase(), AuthenticateResp.class);
                    classByDiscriminatorValue.put("BusinessTypeNotFoundResp".toUpperCase(), BusinessTypeNotFoundResp.class);
                    classByDiscriminatorValue.put("BusinessTypeResp".toUpperCase(), BusinessTypeResp.class);
                    classByDiscriminatorValue.put("CommonErrorResp".toUpperCase(), CommonErrorResp.class);
                    classByDiscriminatorValue.put("EmailExistsResp".toUpperCase(), EmailExistsResp.class);
                    classByDiscriminatorValue.put("inline_response_200".toUpperCase(), InlineResponse200.class);
                    classByDiscriminatorValue.put("inline_response_200_1".toUpperCase(), InlineResponse2001.class);
                    classByDiscriminatorValue.put("inline_response_200_2".toUpperCase(), InlineResponse2002.class);
                    classByDiscriminatorValue.put("inline_response_200_3".toUpperCase(), InlineResponse2003.class);
                    classByDiscriminatorValue.put("inline_response_200_4".toUpperCase(), InlineResponse2004.class);
                    classByDiscriminatorValue.put("inline_response_200_5".toUpperCase(), InlineResponse2005.class);
                    classByDiscriminatorValue.put("inline_response_200_6".toUpperCase(), InlineResponse2006.class);
                    classByDiscriminatorValue.put("inline_response_200_7".toUpperCase(), InlineResponse2007.class);
                    classByDiscriminatorValue.put("inline_response_200_8".toUpperCase(), InlineResponse2008.class);
                    classByDiscriminatorValue.put("inline_response_200_9".toUpperCase(), InlineResponse2009.class);
                    classByDiscriminatorValue.put("inline_response_400_1".toUpperCase(), InlineResponse4001.class);
                    classByDiscriminatorValue.put("inline_response_404".toUpperCase(), InlineResponse404.class);
                    classByDiscriminatorValue.put("InviteUserResp".toUpperCase(), InviteUserResp.class);
                    classByDiscriminatorValue.put("OtpPassResetResp".toUpperCase(), OtpPassResetResp.class);
                    classByDiscriminatorValue.put("OtpResp".toUpperCase(), OtpResp.class);
                    classByDiscriminatorValue.put("RoleExistsResp".toUpperCase(), RoleExistsResp.class);
                    classByDiscriminatorValue.put("RoleResp".toUpperCase(), RoleResp.class);
                    classByDiscriminatorValue.put("RoleUpgradeFailedResp".toUpperCase(), RoleUpgradeFailedResp.class);
                    classByDiscriminatorValue.put("UpgradeLevelResp".toUpperCase(), UpgradeLevelResp.class);
                    classByDiscriminatorValue.put("UserActivationFailedResp".toUpperCase(), UserActivationFailedResp.class);
                    classByDiscriminatorValue.put("UserResp".toUpperCase(), UserResp.class);
                    classByDiscriminatorValue.put("ViewMyAgentsResp".toUpperCase(), ViewMyAgentsResp.class);
                    classByDiscriminatorValue.put("CommonResp".toUpperCase(), CommonResp.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(CommonResp.class, new PostProcessor<CommonResp>() {
              @Override
              public void postDeserialize(CommonResp result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, CommonResp src, Gson gson) {
                  Map<Class<? extends CommonResp>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ActivateUserResp.class, "ActivateUserResp");
                      discriminatorValueByClass.put(AuthenticateResp.class, "AuthenticateResp");
                      discriminatorValueByClass.put(BusinessTypeNotFoundResp.class, "BusinessTypeNotFoundResp");
                      discriminatorValueByClass.put(BusinessTypeResp.class, "BusinessTypeResp");
                      discriminatorValueByClass.put(CommonErrorResp.class, "CommonErrorResp");
                      discriminatorValueByClass.put(EmailExistsResp.class, "EmailExistsResp");
                      discriminatorValueByClass.put(InlineResponse200.class, "inline_response_200");
                      discriminatorValueByClass.put(InlineResponse2001.class, "inline_response_200_1");
                      discriminatorValueByClass.put(InlineResponse2002.class, "inline_response_200_2");
                      discriminatorValueByClass.put(InlineResponse2003.class, "inline_response_200_3");
                      discriminatorValueByClass.put(InlineResponse2004.class, "inline_response_200_4");
                      discriminatorValueByClass.put(InlineResponse2005.class, "inline_response_200_5");
                      discriminatorValueByClass.put(InlineResponse2006.class, "inline_response_200_6");
                      discriminatorValueByClass.put(InlineResponse2007.class, "inline_response_200_7");
                      discriminatorValueByClass.put(InlineResponse2008.class, "inline_response_200_8");
                      discriminatorValueByClass.put(InlineResponse2009.class, "inline_response_200_9");
                      discriminatorValueByClass.put(InlineResponse4001.class, "inline_response_400_1");
                      discriminatorValueByClass.put(InlineResponse404.class, "inline_response_404");
                      discriminatorValueByClass.put(InviteUserResp.class, "InviteUserResp");
                      discriminatorValueByClass.put(OtpPassResetResp.class, "OtpPassResetResp");
                      discriminatorValueByClass.put(OtpResp.class, "OtpResp");
                      discriminatorValueByClass.put(RoleExistsResp.class, "RoleExistsResp");
                      discriminatorValueByClass.put(RoleResp.class, "RoleResp");
                      discriminatorValueByClass.put(RoleUpgradeFailedResp.class, "RoleUpgradeFailedResp");
                      discriminatorValueByClass.put(UpgradeLevelResp.class, "UpgradeLevelResp");
                      discriminatorValueByClass.put(UserActivationFailedResp.class, "UserActivationFailedResp");
                      discriminatorValueByClass.put(UserResp.class, "UserResp");
                      discriminatorValueByClass.put(ViewMyAgentsResp.class, "ViewMyAgentsResp");
                      discriminatorValueByClass.put(CommonResp.class, "CommonResp");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(UserCommon.class, new TypeSelector<UserCommon>() {
            @Override
            public Class<? extends UserCommon> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends UserCommon>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("body_4".toUpperCase(), Body4.class);
                    classByDiscriminatorValue.put("body_5".toUpperCase(), Body5.class);
                    classByDiscriminatorValue.put("NewUser".toUpperCase(), NewUser.class);
                    classByDiscriminatorValue.put("UserCommon".toUpperCase(), UserCommon.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(UserCommon.class, new PostProcessor<UserCommon>() {
              @Override
              public void postDeserialize(UserCommon result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, UserCommon src, Gson gson) {
                  Map<Class<? extends UserCommon>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(Body4.class, "body_4");
                      discriminatorValueByClass.put(Body5.class, "body_5");
                      discriminatorValueByClass.put(NewUser.class, "NewUser");
                      discriminatorValueByClass.put(UserCommon.class, "UserCommon");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(CommonErrorResp.class, new TypeSelector<CommonErrorResp>() {
            @Override
            public Class<? extends CommonErrorResp> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends CommonErrorResp>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("inline_response_400".toUpperCase(), InlineResponse400.class);
                    classByDiscriminatorValue.put("inline_response_400_2".toUpperCase(), InlineResponse4002.class);
                    classByDiscriminatorValue.put("CommonErrorResp".toUpperCase(), CommonErrorResp.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(CommonErrorResp.class, new PostProcessor<CommonErrorResp>() {
              @Override
              public void postDeserialize(CommonErrorResp result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, CommonErrorResp src, Gson gson) {
                  Map<Class<? extends CommonErrorResp>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(InlineResponse400.class, "inline_response_400");
                      discriminatorValueByClass.put(InlineResponse4002.class, "inline_response_400_2");
                      discriminatorValueByClass.put(CommonErrorResp.class, "CommonErrorResp");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
